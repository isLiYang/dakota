Blurb::
Markov Chain Monte Carlo algorithms from the QUESO package
Description::
For the QUESO method, one can use an emulator in the MCMC sampling. This will 
greatly improve the speed, since the Monte Carlo Markov Chain will generate 
thousands of samples on the emulator instead of the real simulation code. 
However, in the case of fast running evaluations, we recommend the use of 
no emulator. An emulator may be specified with the keyword \c emulator, 
followed by a \c gaussian_process emulator, a \c pce emulator (polynomial chaos
expansion), or a \c sc emulator (stochastic collocation). For the 
\c gaussian_process emulator, the user must specify whether to use the 
\c surfpack or \c dakota version of the Gaussian process. 
The user can define the number of samples 
\c emulator_samples from which the emulator should be built. It is also 
possible to build the Gaussian process from points read in from the 
\c import_points_file and to export approximation-based sample evaluations 
using \c export_points_file. For \c pce or \c sc, the user can define a \c sparse_grid_level. 

In terms of the MCMC sampling, one can specify one of the following MCMC algorithms to use: 
\c dram for DRAM (Delayed Rejection Adaptive Metropolis), \c delayed_rejection for delayed_rejection only, 
\c adaptive_metropolis for adaptive metropolis only, 
\c metropolis_hastings for Metropolis Hastings, 
and \c multilevel for the multilevel MCMC algorithm. 

There are a variety of ways the user can specify the proposal covariance matrix which 
is very important in governing the samples generated in the chain.  
The proposal covariance specifies the covariance structure of a multivariate normal distribution. 
The user can specify \c proposal_covariance, followed by \c derivatives, \c prior, 
\c values, or \c filename.  The derivative specification involves 
forming the Hessian of the misfit function (the negative
log likelihood).  When derivative information is available inexpensively (e.g. from an emulator), 
the derived-based proposal covariance forms a more
accurate proposal distribution, resulting in lower rejection rates and
faster chain mixing.  The prior setting involves constructing the proposal from the variance of the prior distributions of the parameters being calibrated.  When specifying the proposal covariance with values or from a file, the user 
can choose to specify only the diagonals of the covariance matrix with \c diagonal or to specify the full covariance matrix with \c matrix. 
 
There are two other controls for QUESO. 
The \c likelihood_scale is a number which scales the likelihood by dividing 
the log of the likelihood (e.g. dividing the sum of squared differences 
between the experimental data and simulation data or SSE). This 
is useful for situations with very small likelihoods (e.g. the model is either 
very far away from the data or there is a lot of data so the likelihood function 
involves multiplying many likelihoods together, where the SSE term is large 
and the likelihood becomes very small). 
In some respects, the \c likelihood_scale can be seen as a normalizing factor
for the SSE. If the SSE is large, the \c likelihood_scale should be large. 
The second factor is a \c logit_transform,  
which performs an internal variable transformation from bounded domains to unbounded domains
 in order to reduce sample rejection due to an out-of-bounds condition.
 
Finally, we offer the option 
to calibrate the sigma terms with the \c calibrate_sigma flag. 
The sigma terms refer to the variance/covariance of the measurement error. 
If experimental measurement error is available to inform sigma, that is 
very useful, but often measurement uncertainty is not available. Note that 
if \c calibrate_sigma is specified, a separate sigma term will be calibrated 
for each calibration term. Thus, if there are 50 calibration terms (e.g. 
experimental points against which we are trying to match the model), 
50 sigma values will be added to the calibration process. Calibration 
of the sigma values is turned off by default: only the design parameters are 
calibrated in default mode.  Currently, \c calibrate_sigma is only applicable to scalar responses.

Note that as of Dakota 6.2, the field data capability may be used with QUESO.
That is, the user can specify field simulation data and field experiment data,
and Dakota will interpolate and provide the proper residuals to the Bayesian calibration.

Topics::	bayesian_calibration, package_queso
Examples::
Theory::
Faq::
See_Also::	
