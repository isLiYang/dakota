107a108
>   initialized=0; //we run serially all the time!
133a135
>   initialized=0; //we run serially all the time!
141a144,171
> /** This constructor is provided for the ISSM software, to run serial
>  * Dakota in a parallel MPI ring: */
> ParallelLibrary::ParallelLibrary(char* serial_mode):
>   dakotaMPIComm(MPI_COMM_WORLD), worldRank(0), worldSize(1),
>   mpirunFlag(false), ownMPIFlag(false), dummyFlag(false),
>   stdOutputToFile(false), stdErrorToFile(false), checkFlag(false),
>   preRunFlag(true), runFlag(true), postRunFlag(true), userModesFlag(false),
>   outputTimings(true), startClock(0), stopRestartEvals(0),
>   currPLIter(parallelLevels.end()), currPCIter(parallelConfigurations.end())
> {
>   initialize_timers();
> 
>   // do not initialize MPI.  Get worldRank/worldSize if available
>   ParallelLevel pl;
> #ifdef HAVE_MPI // mpi available, we still don't want to run in parallel for Dakota!
>   pl.serverIntraComm = MPI_COMM_NULL;
>   Cout << "Running Dakota 5.3.1 MPI executable in serial mode on CPU 0 for ISSM." << std::endl;
> #else // mpi not available
>   pl.serverIntraComm = MPI_COMM_NULL;
>   Cout << "Running Dakota 5.3.1 serial executable in serial mode for ISSM." << std::endl;
> #endif // HAVE_MPI
> 
>   parallelLevels.push_back(pl);
>   currPLIter = parallelLevels.begin();
>   increment_parallel_configuration();
> }
> 
> 
1536a1567
>   initialized=0; //we run serially all the time!
