178a179
>   initialized=0; //we run serially all the time!
214a216,248
> /** This constructor is provided for the Issm software, to run serial
>  * Dakota in a parallel MPI ring: */
> ParallelLibrary::ParallelLibrary(char* serial_mode):
>   worldRank(0), worldSize(1), 
>   mpirunFlag(false), ownMPIFlag(false), dummyFlag(false),
>   stdOutputToFile(false), stdErrorToFile(false), checkFlag(false),
>   preRunFlag(true), runFlag(true), postRunFlag(true), userModesFlag(false), 
>   startClock(0), stopRestartEvals(0),
>   currPLIter(parallelLevels.end()), currPCIter(parallelConfigurations.end())
> {
>   startClock   = clock();
> #ifdef DAKOTA_UTILIB
>   utilib::exception_mngr::set_mode(utilib::exception_mngr::Abort);
>   startCPUTime = CPUSeconds();       // see utilib/src/sys/seconds.cpp
>   startWCTime  = WallClockSeconds(); // see utilib/src/sys/seconds.cpp
> #endif // DAKOTA_UTILIB
> 
>   // do not initialize MPI.  Get worldRank/worldSize if available
>   ParallelLevel pl;
> #ifdef HAVE_MPI // mpi available, we still don't want to run in parallel for Dakota!
>   pl.serverIntraComm = MPI_COMM_NULL;
>   Cout << "Running Dakota 5.2 MPI executable in serial mode on CPU 0 for ISSM.";
> #else // mpi not available
>   pl.serverIntraComm = MPI_COMM_NULL;
>   Cout << "Running Dakota 5.2 serial executable in serial mode for ISSM.\n";
> #endif // HAVE_MPI
> 
>   parallelLevels.push_back(pl);
>   currPLIter = parallelLevels.begin();
>   increment_parallel_configuration();
> }
> 
> 
